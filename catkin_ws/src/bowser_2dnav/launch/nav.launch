<launch>

    <arg name="move_base" default="true" />

    <!-- converts depth camera topics to fake 2D LaserScan msg -->
    <node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan">
      <remap from="image"       to="/depth_camera/depth/image_raw"/>
      <remap from="camera_info" to="/depth_camera/depth/camera_info"/>
      <remap from="scan"        to="/dc_scan"/>
      <param name="range_max" type="double" value="4"/>
      <param name="output_frame_id" type="string" value="bowser2/bowser_depthcam/dc_link"/>
    </node>
    <!-- output of this node is /dc_scan -->
    
    <group ns="rtabmap">

        <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="--delete_db_on_start">
            <param name="frame_id" type="string" value="/bowser2/base_link"/>

            <param name="subscribe_depth" type="bool" value="true"/>		<!-- bowser_depthcam -->
            <param name="subscribe_rgbd" type="bool" value="false"/>	
            <param name="subscribe_scan" type="bool" value="false"/> 		<!-- only good for 2D lidar (LaserScan msg) !! -->
            <param name="subscribe_scan_cloud" type="bool" value="true"/> 	<!-- to handle the PointCloud2 from the velodyne-->

            <remap from="odom" to="/odom"/>		<!-- without leading slash, it would look for /bowser2/odom-->		
            <remap from="scan" to="/dc_scan"/>	<!-- for 2D laserscan generated by depthimage_to_laserscan node above-->
            <remap from="scan_cloud" to="/bowser/velodyne" /> <!-- for 3D pointcloud from bowser_hdl32 -->

            <remap from="rgb/image"       to="/depth_camera/color/image_raw"/>
            <remap from="depth/image"     to="/depth_camera/depth/image_raw"/>
            <remap from="rgb/camera_info" to="/depth_camera/color/camera_info"/>

            <param name="queue_size" type="int" value="10"/>
            <!-- <param name="approx_sync"       value="true"/> 	 -->

            <!-- RTAB-Map's parameters -->
            <param name="RGBD/NeighborLinkRefining" type="string" value="true"/>
            <param name="RGBD/ProximityBySpace"     type="string" value="true"/>
            <param name="RGBD/AngularUpdate"        type="string" value="0.01"/>
            <param name="RGBD/LinearUpdate"         type="string" value="0.01"/>
            <param name="RGBD/OptimizeFromGraphEnd" type="string" value="false"/>
            <param name="Grid/FromDepth"            type="string" value="false"/> <!-- occupancy grid from lidar -->
            <param name="Reg/Force3DoF"             type="string" value="true"/>
            <param name="Reg/Strategy"              type="string" value="1"/> <!-- 1=ICP -->

            <!-- ICP parameters -->
            <param name="Icp/VoxelSize"                 type="string" value="0.05"/>
            <param name="Icp/MaxCorrespondenceDistance" type="string" value="0.1"/>

            <remap from="grid_map" to="/map" />

        </node>
      </group>

    <node if="$(arg move_base)" pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <rosparam file="$(find bowser_2dnav)/yaml/costmap_common_params.yaml" command="load" ns="global_costmap" /> 
        <rosparam file="$(find bowser_2dnav)/yaml/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find bowser_2dnav)/yaml/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find bowser_2dnav)/yaml/global_costmap_params.yaml" command="load" /> 
        <rosparam file="$(find bowser_2dnav)/yaml/base_local_planner_params.yaml" command="load" />
    </node>

</launch>